# Authors: Sam Champer, Andi Nosler
# Adapted and modified from code by Dennis Lee: https://gist.github.com/dennislwy/0194036234445776d48ad2fb594457d4

from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA256
from Crypto import Random


def new_rsa(keysize):
    """
    Generates a new RSA public/private pair.
    :param keysize: Size of the RSA key.
    :return: The public and private key.
    """
    random_generator = Random.new().read
    rsa_key = RSA.generate(keysize, random_generator)
    private, public = rsa_key, rsa_key.publickey()
    return public, private


def import_key(filename):
    """
    Import a key from external source (like a text file).
    :param filename: A file with a RSA private key.
    :return: A key that can be used.
    """
    f = open(filename, 'r')
    return RSA.importKey(f.read())


def get_public_key(priv_key):
    """
    Get the public key associated with a private key.
    :param priv_key: A private key.
    :return: A public key.
    """
    return priv_key.publickey()


def encrypt(message, pub_key):
    """
    Encrypts a message with a public key.
    :param message: A string.
    :param pub_key: A public key.
    :return: An encrypted message.
    """
    cipher = PKCS1_OAEP.new(pub_key)
    return cipher.encrypt(str.encode(message))


def decrypt(ciphertext, priv_key):
    """
    Decrypt a message encrypted with the encrypt function.
    :param ciphertext: The encrypted message.
    :param priv_key: A private key.
    :return: A plain text message.
    """
    cipher = PKCS1_OAEP.new(priv_key)
    return cipher.decrypt(ciphertext).decode()


def sign(message, priv_key):
    """
    Sign a message with a private key to prove identity of the signer.
    :param message: A string.
    :param priv_key: A private key.
    :return: A signature.
    """
    signer = PKCS1_v1_5.new(priv_key)
    digest = SHA256.new()
    digest.update(str.encode(message))
    return signer.sign(digest)


def verify(message, signature, pub_key):
    """
    Checks a signiture against a public key to verify that it is sent by who it claims to be sent by.
    :param message: A string.
    :param signature: A signiture generated by the sign function.
    :param pub_key: A public key.
    :return: True if the message was signed by the owner of the public key, otherwise false.
    """
    signer = PKCS1_v1_5.new(pub_key)
    digest = SHA256.new()
    digest.update(str.encode(message))
    return signer.verify(digest, signature)
